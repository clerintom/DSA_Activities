{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "56931bf0",
   "metadata": {},
   "source": [
    "### Q&A Activity: Week -10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "517d7ba9",
   "metadata": {},
   "source": [
    "#### 1. Load the data into the pandas environment and identify some basic details of the dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "d775acce",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as  pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "727cf52d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('D:\\Clerin\\data scienc\\employee.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "93ad3643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Allen Smith</td>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>S Kumar</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jack Morgan</td>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ying Chin</td>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dheeraj Patel</td>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>711</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            name   age   income gender  department grade  performance_score\n",
       "0    Allen Smith  45.0      NaN    NaN  Operations    G3                723\n",
       "1        S Kumar   NaN  16000.0      F     Finance    G0                520\n",
       "2    Jack Morgan  32.0  35000.0      M     Finance    G2                674\n",
       "3      Ying Chin  45.0  65000.0      F       Sales    G3                556\n",
       "4  Dheeraj Patel  30.0  42000.0      F  Operations    G2                711"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "48be5112",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9 entries, 0 to 8\n",
      "Data columns (total 7 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   name               9 non-null      object \n",
      " 1   age                7 non-null      float64\n",
      " 2   income             7 non-null      float64\n",
      " 3   gender             7 non-null      object \n",
      " 4   department         9 non-null      object \n",
      " 5   grade              9 non-null      object \n",
      " 6   performance_score  9 non-null      int64  \n",
      "dtypes: float64(2), int64(1), object(4)\n",
      "memory usage: 632.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "caa26ca8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['name', 'age', 'income', 'gender', 'department', 'grade',\n",
       "       'performance_score'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "2f37ab7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>40.428571</td>\n",
       "      <td>52857.142857</td>\n",
       "      <td>610.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>12.204605</td>\n",
       "      <td>26028.372797</td>\n",
       "      <td>235.671912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>16000.000000</td>\n",
       "      <td>53.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>38500.000000</td>\n",
       "      <td>556.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>52000.000000</td>\n",
       "      <td>674.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>49.500000</td>\n",
       "      <td>63500.000000</td>\n",
       "      <td>711.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>54.000000</td>\n",
       "      <td>98000.000000</td>\n",
       "      <td>901.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             age        income  performance_score\n",
       "count   7.000000      7.000000           9.000000\n",
       "mean   40.428571  52857.142857         610.666667\n",
       "std    12.204605  26028.372797         235.671912\n",
       "min    23.000000  16000.000000          53.000000\n",
       "25%    31.000000  38500.000000         556.000000\n",
       "50%    45.000000  52000.000000         674.000000\n",
       "75%    49.500000  63500.000000         711.000000\n",
       "max    54.000000  98000.000000         901.000000"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4272a229",
   "metadata": {},
   "source": [
    "#### 2. Reset the index as \"name\" as the index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "0ea23e23",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.set_index(['name'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "748221ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>NaN</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>NaN</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>54.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income gender  department grade  performance_score\n",
       "name                                                                    \n",
       "Allen Smith    45.0      NaN    NaN  Operations    G3                723\n",
       "S Kumar         NaN  16000.0      F     Finance    G0                520\n",
       "Jack Morgan    32.0  35000.0      M     Finance    G2                674\n",
       "Ying Chin      45.0  65000.0      F       Sales    G3                556\n",
       "Dheeraj Patel  30.0  42000.0      F  Operations    G2                711\n",
       "Satyam Sharma   NaN  62000.0    NaN       Sales    G3                649\n",
       "James Authur   54.0      NaN      F  Operations    G3                 53\n",
       "Josh Wills     54.0  52000.0      F     Finance    G3                901\n",
       "Leo Duck       23.0  98000.0      M       Sales    G4                709"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56abf355",
   "metadata": {},
   "source": [
    "#### 3. Select rows for specific names Jack Morgan and Josh wills.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "03d82522",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age   income gender department grade  performance_score\n",
       "name                                                                 \n",
       "Jack Morgan  32.0  35000.0      M    Finance    G2                674\n",
       "Josh Wills   54.0  52000.0      F    Finance    G3                901"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[['Jack Morgan','Josh Wills'],:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef50463",
   "metadata": {},
   "source": [
    "#### 4. Select data for multiple values \"Sales\" and “Finance”.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e2f8a8da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>NaN</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>NaN</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income gender department grade  performance_score\n",
       "name                                                                   \n",
       "S Kumar         NaN  16000.0      F    Finance    G0                520\n",
       "Jack Morgan    32.0  35000.0      M    Finance    G2                674\n",
       "Ying Chin      45.0  65000.0      F      Sales    G3                556\n",
       "Satyam Sharma   NaN  62000.0    NaN      Sales    G3                649\n",
       "Josh Wills     54.0  52000.0      F    Finance    G3                901\n",
       "Leo Duck       23.0  98000.0      M      Sales    G4                709"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['department']=='Sales')|(df['department']=='Finance')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ceb4f85",
   "metadata": {},
   "source": [
    "#### 5. Display employee who has more than 700 performance score.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "a2ad6361",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income gender  department grade  performance_score\n",
       "name                                                                    \n",
       "Allen Smith    45.0      NaN    NaN  Operations    G3                723\n",
       "Dheeraj Patel  30.0  42000.0      F  Operations    G2                711\n",
       "Josh Wills     54.0  52000.0      F     Finance    G3                901\n",
       "Leo Duck       23.0  98000.0      M       Sales    G4                709"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.performance_score> 700]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaed878d",
   "metadata": {},
   "source": [
    "#### 6. Display employee who has more than 500 and less than 700 performance score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "6af6bf8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>NaN</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>NaN</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income gender department grade  performance_score\n",
       "name                                                                   \n",
       "S Kumar         NaN  16000.0      F    Finance    G0                520\n",
       "Jack Morgan    32.0  35000.0      M    Finance    G2                674\n",
       "Ying Chin      45.0  65000.0      F      Sales    G3                556\n",
       "Satyam Sharma   NaN  62000.0    NaN      Sales    G3                649"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df.performance_score>500)&(df.performance_score<700)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d38aac85",
   "metadata": {},
   "source": [
    "#### 7. Check and handle missing values in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "eb76b661",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                  2\n",
       "income               2\n",
       "gender               2\n",
       "department           0\n",
       "grade                0\n",
       "performance_score    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "2e4fb563",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    F\n",
       "dtype: object"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Replace gender column with mode, and other columns with median\n",
    "df.gender.mode()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "6ba06671",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.gender.fillna('F',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "ba1b05aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.age.fillna(df['age'].median(), inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "aae21203",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='income'>"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(y=df.income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a49de28f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#since there is outlier in income replace with median\n",
    "df.income.fillna(df['income'].median(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "46df8fa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                  0\n",
       "income               0\n",
       "gender               0\n",
       "department           0\n",
       "grade                0\n",
       "performance_score    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c926cd74",
   "metadata": {},
   "source": [
    "#### 8. Check the outliers and handle outliers in performance score using Percentiles.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f12e2175",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='performance_score'>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting a boxplot to detect the presence of outliers\n",
    "sns.boxplot(y=df.performance_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "55c47604",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[53]\n"
     ]
    }
   ],
   "source": [
    "#there is an outlier presentin performance_score and we will handle it using IQR\n",
    "Q1=np.percentile(df['performance_score'],25,interpolation='midpoint')\n",
    "Q2=np.percentile(df['performance_score'],50,interpolation='midpoint')\n",
    "Q3=np.percentile(df['performance_score'],75,interpolation='midpoint')\n",
    "IQR=Q3-Q1\n",
    "lowlmt=Q1-1.5*IQR\n",
    "uplmt=Q3+1.5*IQR\n",
    "#find outlier\n",
    "outlier = []\n",
    "for x in df['performance_score']:\n",
    "    if (x > uplmt) or (x < lowlmt):\n",
    "        outlier.append(x)\n",
    "print(outlier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "a27f2bcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#locate the indexes of outliers\n",
    "\n",
    "index1 = (df['performance_score']<lowlmt)\n",
    "index1 = df.loc[index1].index\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "774354e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age   income gender  department grade  performance_score\n",
       "name                                                                   \n",
       "James Authur  54.0  52000.0      F  Operations    G3                 53"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#outlier\n",
    "df.loc[index1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "cc48c202",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "674.0"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['performance_score'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "f5023541",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>gender</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>45.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>45.0</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>45.0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>F</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income gender  department grade  performance_score\n",
       "name                                                                    \n",
       "Allen Smith    45.0  52000.0      F  Operations    G3                723\n",
       "S Kumar        45.0  16000.0      F     Finance    G0                520\n",
       "Jack Morgan    32.0  35000.0      M     Finance    G2                674\n",
       "Ying Chin      45.0  65000.0      F       Sales    G3                556\n",
       "Dheeraj Patel  30.0  42000.0      F  Operations    G2                711\n",
       "Satyam Sharma  45.0  62000.0      F       Sales    G3                649\n",
       "James Authur   54.0  52000.0      F  Operations    G3                674\n",
       "Josh Wills     54.0  52000.0      F     Finance    G3                901\n",
       "Leo Duck       23.0  98000.0      M       Sales    G4                709"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replacing outlier with median\n",
    "df.loc[list(index1),'performance_score']=df['performance_score'].median()\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c6ae12a",
   "metadata": {},
   "source": [
    "#### 9. Check the gender column and do Dummy encoding.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "d9af296c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "Allen Smith      F\n",
       "S Kumar          F\n",
       "Jack Morgan      M\n",
       "Ying Chin        F\n",
       "Dheeraj Patel    F\n",
       "Satyam Sharma    F\n",
       "James Authur     F\n",
       "Josh Wills       F\n",
       "Leo Duck         M\n",
       "Name: gender, dtype: object"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['gender']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ef81ff58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               F  M\n",
       "name               \n",
       "Allen Smith    1  0\n",
       "S Kumar        1  0\n",
       "Jack Morgan    0  1\n",
       "Ying Chin      1  0\n",
       "Dheeraj Patel  1  0\n",
       "Satyam Sharma  1  0\n",
       "James Authur   1  0\n",
       "Josh Wills     1  0\n",
       "Leo Duck       0  1"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.get_dummies(df.gender)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "aa934f02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>45.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>723</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>45.0</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>520</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>674</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>556</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>711</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>45.0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>649</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>674</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>901</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>709</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income  department grade  performance_score  gender_F  \\\n",
       "name                                                                          \n",
       "Allen Smith    45.0  52000.0  Operations    G3                723         1   \n",
       "S Kumar        45.0  16000.0     Finance    G0                520         1   \n",
       "Jack Morgan    32.0  35000.0     Finance    G2                674         0   \n",
       "Ying Chin      45.0  65000.0       Sales    G3                556         1   \n",
       "Dheeraj Patel  30.0  42000.0  Operations    G2                711         1   \n",
       "Satyam Sharma  45.0  62000.0       Sales    G3                649         1   \n",
       "James Authur   54.0  52000.0  Operations    G3                674         1   \n",
       "Josh Wills     54.0  52000.0     Finance    G3                901         1   \n",
       "Leo Duck       23.0  98000.0       Sales    G4                709         0   \n",
       "\n",
       "               gender_M  \n",
       "name                     \n",
       "Allen Smith           0  \n",
       "S Kumar               0  \n",
       "Jack Morgan           1  \n",
       "Ying Chin             0  \n",
       "Dheeraj Patel         0  \n",
       "Satyam Sharma         0  \n",
       "James Authur          0  \n",
       "Josh Wills            0  \n",
       "Leo Duck              1  "
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded = pd.get_dummies(df,columns=['gender'])\n",
    "df_encoded"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c519856b",
   "metadata": {},
   "source": [
    "#### 10.Do the standard scaling on the feature performance score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "564cadf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "efb2914b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>department</th>\n",
       "      <th>grade</th>\n",
       "      <th>performance_score</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Allen Smith</th>\n",
       "      <td>45.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>0.422890</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S Kumar</th>\n",
       "      <td>45.0</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G0</td>\n",
       "      <td>-1.558187</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jack Morgan</th>\n",
       "      <td>32.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G2</td>\n",
       "      <td>-0.055301</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ying Chin</th>\n",
       "      <td>45.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>-1.206863</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dheeraj Patel</th>\n",
       "      <td>30.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G2</td>\n",
       "      <td>0.305782</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satyam Sharma</th>\n",
       "      <td>45.0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G3</td>\n",
       "      <td>-0.299276</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James Authur</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Operations</td>\n",
       "      <td>G3</td>\n",
       "      <td>-0.055301</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Josh Wills</th>\n",
       "      <td>54.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>G3</td>\n",
       "      <td>2.159992</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leo Duck</th>\n",
       "      <td>23.0</td>\n",
       "      <td>98000.0</td>\n",
       "      <td>Sales</td>\n",
       "      <td>G4</td>\n",
       "      <td>0.286264</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   income  department grade  performance_score  gender_F  \\\n",
       "name                                                                          \n",
       "Allen Smith    45.0  52000.0  Operations    G3           0.422890         1   \n",
       "S Kumar        45.0  16000.0     Finance    G0          -1.558187         1   \n",
       "Jack Morgan    32.0  35000.0     Finance    G2          -0.055301         0   \n",
       "Ying Chin      45.0  65000.0       Sales    G3          -1.206863         1   \n",
       "Dheeraj Patel  30.0  42000.0  Operations    G2           0.305782         1   \n",
       "Satyam Sharma  45.0  62000.0       Sales    G3          -0.299276         1   \n",
       "James Authur   54.0  52000.0  Operations    G3          -0.055301         1   \n",
       "Josh Wills     54.0  52000.0     Finance    G3           2.159992         1   \n",
       "Leo Duck       23.0  98000.0       Sales    G4           0.286264         0   \n",
       "\n",
       "               gender_M  \n",
       "name                     \n",
       "Allen Smith           0  \n",
       "S Kumar               0  \n",
       "Jack Morgan           1  \n",
       "Ying Chin             0  \n",
       "Dheeraj Patel         0  \n",
       "Satyam Sharma         0  \n",
       "James Authur          0  \n",
       "Josh Wills            0  \n",
       "Leo Duck              1  "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scale = StandardScaler()\n",
    "scaled_data =scale.fit_transform(df_encoded[['performance_score']])\n",
    "df_encoded['performance_score']=scaled_data\n",
    "df_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6c41098",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b02b39e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
